Step 1: Generate a CA Certificate and Key
Install OpenSSL: Ensure you have OpenSSL installed. On most Unix-based systems, it's already available. If not, install it via your package manager. For example:

bash

Copy
sudo apt-get install openssl
Generate the CA Key:

bash

Copy
openssl genrsa -out ca.key 2048
Generate the CA Certificate:

bash

Copy
openssl req -x509 -new -nodes -key ca.key -sha256 -days 365 -out ca.crt
Follow the prompts to fill in the details.

Step 2: Configure Proxy to Use CA Certificate
Install Dependencies (if not already installed):

bash

Copy
go get -u github.com/elazarl/goproxy
go get -u github.com/elazarl/goproxy/ext
Modify Your Proxy Code to handle HTTPS:

go

Copy
package main

import (
    "context"
    "crypto/tls"
    "fmt"
    "log"
    "net"
    "net/http"
    "net/url"
    "strings"
    "time"

    "github.com/elazarl/goproxy"
    "github.com/elazarl/goproxy/ext"
)

type youtubeCondition struct{}

func (y *youtubeCondition) HandleReq(req *http.Request, ctx *goproxy.ProxyCtx) bool {
    host := strings.ToLower(req.URL.Host)
    return strings.Contains(host, "youtube.com") ||
        strings.Contains(host, "youtu.be") ||
        strings.Contains(host, "ytimg.com") ||
        strings.Contains(host, "yt3.ggpht.com") ||
        strings.Contains(host, "googlevideo.com")
}

func (y *youtubeCondition) HandleResp(resp *http.Response, ctx *goproxy.ProxyCtx) bool {
    return false // We don't need to handle responses
}

func main() {
    fmt.Println("Proxy server starting on port 8080...")
    proxy := goproxy.NewProxyHttpServer()
    proxy.Verbose = true

    // Load the CA certificate and key
    caCert, err := tls.LoadX509KeyPair("ca.crt", "ca.key")
    if err != nil {
        log.Fatalf("Failed to load CA certificate and key: %v\n", err)
    }
    goproxyExt := &goproxy_ext.Proxy{
        CA: &goproxy_ext.CA{
            Cert: caCert,
        },
    }

    // Enable HTTPS MITM
    proxy.OnRequest().HandleConnect(goproxyExt.MitmConnect)

    proxy.OnRequest().DoFunc(
        func(r *http.Request, ctx *goproxy.ProxyCtx) (*http.Request, *http.Response) {
            fmt.Printf("Received request for: %s\n", r.URL.String())
            return r, nil
        })

    // Configure proxy transport
    proxy.Tr.Proxy = func(req *http.Request) (*url.URL, error) {
        return nil, nil
    }
    proxy.Tr.DialContext = (&net.Dialer{
        Timeout:   30 * time.Second,
        KeepAlive: 30 * time.Second,
        Resolver: &net.Resolver{
            PreferGo: true,
            Dial: func(ctx context.Context, network, address string) (net.Conn, error) {
                fmt.Printf("Attempting to dial: %s\n", address)
                return net.Dial(network, address)
            },
        },
    }).DialContext

    // Block YouTube during specific hours
    proxy.OnRequest(&youtubeCondition{}).DoFunc(
        func(r *http.Request, ctx *goproxy.ProxyCtx) (*http.Request, *http.Response) {
            location, err := time.LoadLocation("Asia/Kolkata")
            if err != nil {
                fmt.Println("Error loading timezone:", err)
                return r, nil
            }
            currentHour := time.Now().In(location).Hour()
            fmt.Printf("YouTube request detected at hour: %d for URL: %s\n", currentHour, r.URL.String())
            if currentHour >= 9 && currentHour < 23 {
                return r, goproxy.NewResponse(r,
                    goproxy.ContentTypeHtml,
                    http.StatusForbidden,
                    `<html><body><h1>Access Blocked</h1><p>YouTube access is blocked during working hours (9:00 AM - 11:00 PM IST)</p></body></html>`)
            }
            return r, nil
        })

    // Start server with error checking
    server := &http.Server{
        Addr:    ":8080",
        Handler: proxy,
    }
    fmt.Println("Server is attempting to bind to port 8080...")
    err = server.ListenAndServe()
    if err != nil {
        log.Fatalf("Failed to start server: %v\n", err)
    }
}
Step 3: Configure Your Browser/System to Trust the CA Certificate
Add CA Certificate to Trusted Root Authorities:

On Windows, use the Certificates Manager (certmgr.msc) to import the ca.crt.

On macOS, add the certificate using Keychain Access.

On Linux, add the certificate to the system's CA store.

Set Your Browser to Use the Proxy:

Configure your browser's proxy settings to point to localhost:8080.

This should set you up for blocking both HTTP and HTTPS YouTube traffic. Let me know how it goes!


You can create a proxy in Go using the goproxy library to block access to specific websites like YouTube and Instagram during certain times of the day. Here’s a basic example to get you started:

Install the goproxy library:
go get github.com/elazarl/goproxy

Write the proxy server code:
Go

package main

import (
    "log"
    "net/http"
    "time"

    "github.com/elazarl/goproxy"
)

func main() {
    proxy := goproxy.NewProxyHttpServer()
    proxy.Verbose = true

    // Block YouTube and Instagram during specific hours
    proxy.OnRequest(goproxy.DstHostIs("www.youtube.com", "www.instagram.com")).DoFunc(
        func(r *http.Request, ctx *goproxy.ProxyCtx) (*http.Request, *http.Response) {
            currentHour := time.Now().Hour()
            if currentHour >= 9 && currentHour <= 17 { // Block from 9 AM to 5 PM
                return r, goproxy.NewResponse(r, goproxy.ContentTypeText, http.StatusForbidden, "Access to this site is blocked during working hours.")
            }
            return r, nil
        })

    log.Fatal(http.ListenAndServe(":8080", proxy))
}
AI-generated code. Review and use carefully. More info on FAQ.
Run the proxy server:
go run main.go

Configure your devices (mobile and laptop) to use this proxy server. You can set the proxy settings in your network configuration to point to the IP address and port where your proxy server is running (e.g., http://<your-ip>:8080).
In this example:

The proxy server blocks access to YouTube and Instagram from 9 AM to 5 PM.
You can adjust the blocked hours by changing the if currentHour >= 9 && currentHour <= 17 condition.
The goproxy.NewResponse function is used to return a “403 Forbidden” response when access is blocked.


Steps to Use goproxy in Your Project
Create a New Directory for Your Project:
mkdir myproxy
cd myproxy

Initialize a Go Module:
go mod init github.com/myusername/myproxy

Add goproxy as a Dependency:
go get github.com/elazarl/goproxy

Write Your Proxy Server Code: Create a file named main.go and add the following code:
Go

package main

import (
    "log"
    "net/http"
    "time"

    "github.com/elazarl/goproxy"
)

func main() {
    proxy := goproxy.NewProxyHttpServer()
    proxy.Verbose = true

    // Block YouTube and Instagram during specific hours
    proxy.OnRequest(goproxy.DstHostIs("www.youtube.com", "www.instagram.com")).DoFunc(
        func(r *http.Request, ctx *goproxy.ProxyCtx) (*http.Request, *http.Response) {
            currentHour := time.Now().Hour()
            if currentHour >= 9 && currentHour <= 17 { // Block from 9 AM to 5 PM
                return r, goproxy.NewResponse(r, goproxy.ContentTypeText, http.StatusForbidden, "Access to this site is blocked during working hours.")
            }
            return r, nil
        })

    log.Fatal(http.ListenAndServe(":8080", proxy))
}
AI-generated code. Review and use carefully. More info on FAQ.
Run Your Proxy Server:
go run main.go

Explanation
Initialize a Go Module: This creates a go.mod file to manage your project’s dependencies.
Add goproxy as a Dependency: This downloads the goproxy library and adds it to your project.
Write Your Proxy Server Code: The example code sets up a proxy server that blocks access to YouTube and Instagram during working hours (9 AM to 5 PM).
This setup should help you get your proxy server running. If you encounter any more issues or need further assistance, feel free to ask!
